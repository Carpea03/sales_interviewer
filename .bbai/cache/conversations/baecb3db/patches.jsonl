{"timestamp":"2024-08-13T05:02:23.303Z","filePath":"main.py","patch":"--- a/main.py\n+++ b/main.py\n@@ -5,6 +5,7 @@ from email.mime.text import MIMEText\n from email.mime.multipart import MIMEMultipart\n from anthropic import Anthropic\n import tornado.websocket\n+import os\n \n # Function to send email with transcript and generated story\n def send_email(transcript, story, recipient):\n@@ -17,6 +18,15 @@ def send_email(transcript, story, recipient):\n         st.error(f\"An error occurred while sending the email: {str(e)}\")\n         return False\n \n+# Function to save conversation to a file\n+def save_conversation(conversation_history):\n+    try:\n+        with open(\"conversation_log.txt\", \"w\") as f:\n+            for message in conversation_history:\n+                f.write(f\"{message['role']}: {message['content']}\\n\\n\")\n+    except Exception as e:\n+        st.error(f\"An error occurred while saving the conversation: {str(e)}\")\n+\n st.title(\"Sales Interviewer\")\n st.write(\n     \"This chatbot will interview you and generate content based on your responses.\"\n@@ -65,6 +75,7 @@ if prompt:\n \n     # Add user message to conversation history\n     st.session_state.conversation_history.append({\"role\": \"user\", \"content\": prompt})\n+    save_conversation(st.session_state.conversation_history)\n \n     # Generate assistant response only if the last message in the conversation history is from the user\n if st.session_state.conversation_history[-1][\"role\"] == \"user\":\n@@ -160,6 +171,7 @@ Remember to maintain a friendly and professional tone throughout the interview,\n \n     # Add assistant response to conversation history\n     st.session_state.conversation_history.append({\"role\": \"assistant\", \"content\": response_text})\n+    save_conversation(st.session_state.conversation_history)\n \n     # Display assistant response in chat message container\n     try:"}
{"timestamp":"2024-08-13T05:04:49.205Z","filePath":"main.py","patch":"--- a/main.py\n+++ b/main.py\n@@ -6,6 +6,7 @@ from email.mime.multipart import MIMEMultipart\n from anthropic import Anthropic\n import tornado.websocket\n import os\n+from datetime import datetime\n \n # Function to send email with transcript and generated story\n def send_email(transcript, story, recipient):\n@@ -18,12 +19,15 @@ def send_email(transcript, story, recipient):\n         st.error(f\"An error occurred while sending the email: {str(e)}\")\n         return False\n \n-# Function to save conversation to a file\n-def save_conversation(conversation_history):\n+# Function to append new messages to the conversation log file\n+def save_conversation(new_messages):\n     try:\n-        with open(\"conversation_log.txt\", \"w\") as f:\n-            for message in conversation_history:\n-                f.write(f\"{message['role']}: {message['content']}\\n\\n\")\n+        with open(\"conversation_log.txt\", \"a\") as f:\n+            timestamp = datetime.now().strftime(\"%Y-%m-%d %H:%M:%S\")\n+            f.write(f\"\\n--- New messages at {timestamp} ---\\n\")\n+            for message in new_messages:\n+                f.write(f\"{message['role']}: {message['content']}\\n\")\n+            f.write(\"\\n\")\n     except Exception as e:\n         st.error(f\"An error occurred while saving the conversation: {str(e)}\")\n \n@@ -75,7 +79,7 @@ if prompt:\n \n     # Add user message to conversation history\n     st.session_state.conversation_history.append({\"role\": \"user\", \"content\": prompt})\n-    save_conversation(st.session_state.conversation_history)\n+    save_conversation([{\"role\": \"user\", \"content\": prompt}])\n \n     # Generate assistant response only if the last message in the conversation history is from the user\n if st.session_state.conversation_history[-1][\"role\"] == \"user\":\n@@ -171,7 +175,7 @@ Remember to maintain a friendly and professional tone throughout the interview,\n \n     # Add assistant response to conversation history\n     st.session_state.conversation_history.append({\"role\": \"assistant\", \"content\": response_text})\n-    save_conversation(st.session_state.conversation_history)\n+    save_conversation([{\"role\": \"assistant\", \"content\": response_text}])\n \n     # Display assistant response in chat message container\n     try:"}
{"timestamp":"2024-08-13T05:06:05.696Z","filePath":"main.py","patch":"--- a/main.py\n+++ b/main.py\n@@ -7,6 +7,7 @@ from anthropic import Anthropic\n import tornado.websocket\n import os\n from datetime import datetime\n+import uuid\n \n # Function to send email with transcript and generated story\n def send_email(transcript, story, recipient):\n@@ -19,15 +20,18 @@ def send_email(transcript, story, recipient):\n         st.error(f\"An error occurred while sending the email: {str(e)}\")\n         return False\n \n-# Function to append new messages to the conversation log file\n-def save_conversation(new_messages):\n+# Function to save new messages to the current conversation file\n+def save_conversation(new_messages, conversation_id):\n+    filename = f\"conversation_{conversation_id}.txt\"\n     try:\n-        with open(\"conversation_log.txt\", \"a\") as f:\n+        with open(filename, \"a\") as f:\n             timestamp = datetime.now().strftime(\"%Y-%m-%d %H:%M:%S\")\n-            f.write(f\"\\n--- New messages at {timestamp} ---\\n\")\n+            if os.path.getsize(filename) == 0:\n+                f.write(f\"Conversation started at {timestamp}\\n\\n\")\n+            else:\n+                f.write(f\"\\n--- New messages at {timestamp} ---\\n\")\n             for message in new_messages:\n                 f.write(f\"{message['role']}: {message['content']}\\n\")\n-            f.write(\"\\n\")\n     except Exception as e:\n         st.error(f\"An error occurred while saving the conversation: {str(e)}\")\n \n@@ -48,6 +52,11 @@ assert isinstance(email_user, str), \"Email user must be a string\"\n # Initialize Anthropic client\n client = Anthropic(api_key=ANTHROPIC_API_KEY)\n \n+# Initialize conversation ID in session state if it doesn't exist\n+if \"conversation_id\" not in st.session_state:\n+    st.session_state.conversation_id = str(uuid.uuid4())\n+    st.write(f\"New conversation started. ID: {st.session_state.conversation_id}\")\n+\n # Initialize 'conversation_history' in session_state if it doesn't exist\n if \"conversation_history\" not in st.session_state:\n     st.session_state.conversation_history = [\n@@ -79,7 +88,7 @@ if prompt:\n \n     # Add user message to conversation history\n     st.session_state.conversation_history.append({\"role\": \"user\", \"content\": prompt})\n-    save_conversation([{\"role\": \"user\", \"content\": prompt}])\n+    save_conversation([{\"role\": \"user\", \"content\": prompt}], st.session_state.conversation_id)\n \n     # Generate assistant response only if the last message in the conversation history is from the user\n if st.session_state.conversation_history[-1][\"role\"] == \"user\":\n@@ -175,7 +184,7 @@ Remember to maintain a friendly and professional tone throughout the interview,\n \n     # Add assistant response to conversation history\n     st.session_state.conversation_history.append({\"role\": \"assistant\", \"content\": response_text})\n-    save_conversation([{\"role\": \"assistant\", \"content\": response_text}])\n+    save_conversation([{\"role\": \"assistant\", \"content\": response_text}], st.session_state.conversation_id)\n \n     # Display assistant response in chat message container\n     try:"}
{"timestamp":"2024-08-13T05:10:08.417Z","filePath":"main.py","patch":"[{\"search\":\"def save_conversation(new_messages, conversation_id):\\n    filename = f\\\"conversation_{conversation_id}.txt\\\"\\n    try:\\n        with open(filename, \\\"a\\\") as f:\\n            timestamp = datetime.now().strftime(\\\"%Y-%m-%d %H:%M:%S\\\")\\n            if os.path.getsize(filename) == 0:\\n                f.write(f\\\"Conversation started at {timestamp}\\\\n\\\\n\\\")\\n            else:\\n                f.write(f\\\"\\\\n--- New messages at {timestamp} ---\\\\n\\\")\\n            for message in new_messages:\\n                f.write(f\\\"{message['role']}: {message['content']}\\\\n\\\")\\n    except Exception as e:\\n        st.error(f\\\"An error occurred while saving the conversation: {str(e)}\\\")\",\"replace\":\"def save_conversation(new_messages, conversation_id):\\n    filename = f\\\"conversation_{conversation_id}.txt\\\"\\n    try:\\n        with open(filename, \\\"a\\\") as f:\\n            timestamp = datetime.now().strftime(\\\"%Y-%m-%d %H:%M:%S\\\")\\n            if os.path.getsize(filename) == 0:\\n                f.write(f\\\"Conversation started at {timestamp}\\\\n\\\\n\\\")\\n            else:\\n                f.write(f\\\"\\\\n--- New messages at {timestamp} ---\\\\n\\\")\\n            for message in new_messages:\\n                f.write(f\\\"{message['role']}: {message['content']}\\\\n\\\")\\n    except Exception as e:\\n        st.error(f\\\"An error occurred while saving the conversation: {str(e)}\\\")\\n\\ndef end_conversation():\\n    \\\"\\\"\\\"Handle the end of the conversation, including sending the email.\\\"\\\"\\\"\\n    transcript = \\\"\\\\n\\\".join([f\\\"{message['role']}: {message['content']}\\\" for message in st.session_state.conversation_history])\\n    \\n    email_sender = st.secrets[\\\"EMAIL_USER\\\"]\\n    email_receiver = \\\"alexcarpenter2000@gmail.com\\\"\\n    subject = \\\"Sales Interview Transcript\\\"\\n    body = f\\\"Interview Transcript:\\\\n\\\\n{transcript}\\\"\\n    \\n    try:\\n        send_email(transcript, \\\"\\\", email_receiver)\\n        st.success('Thank you for the conversation. The transcript has been sent via email.')\\n        # Reset the conversation\\n        st.session_state.conversation_history = []\\n        st.session_state.conversation_id = str(uuid.uuid4())\\n    except Exception as e:\\n        st.error(f\\\"An error occurred while ending the conversation: {e}\\\")\"}]"}
{"timestamp":"2024-08-13T05:10:17.516Z","filePath":"main.py","patch":"[{\"search\":\"# Display chat messages from history on app rerun\\nfor message in st.session_state.conversation_history[1:]:\\n    with st.chat_message(message[\\\"role\\\"]):\\n        st.markdown(message[\\\"content\\\"])\",\"replace\":\"# Display chat messages from history on app rerun\\nfor message in st.session_state.conversation_history[1:]:\\n    with st.chat_message(message[\\\"role\\\"]):\\n        st.markdown(message[\\\"content\\\"])\\n\\n# Add \\\"End Conversation\\\" button\\nif st.button(\\\"End Conversation\\\"):\\n    end_conversation()\"}]"}
{"timestamp":"2024-08-13T05:10:30.340Z","filePath":"main.py","patch":"[{\"search\":\"    # Display assistant response in chat message container\\n    try:\\n        with st.chat_message(\\\"assistant\\\"):\\n            st.markdown(response_text)\\n    except tornado.websocket.WebSocketClosedError:\\n        st.warning(\\\"The connection was closed unexpectedly. Please refresh the page and try again.\\\")\\n        st.stop()\\n\\n    # Extract the article from the response\\n    if \\\"<article>\\\" in response_text:\\n        article_start = response_text.index(\\\"<article>\\\") + len(\\\"<article>\\\")\\n        article_end = response_text.index(\\\"</article>\\\")\\n        article = response_text[article_start:article_end].strip()\\n\\n        # Generate the interview transcript\\n        transcript = \\\"\\\\n\\\".join([f\\\"{message['role']}: {message['content']}\\\" for message in st.session_state.conversation_history])\\n\\n        # Send the email with the transcript and article\\n        email_sender = st.secrets[\\\"EMAIL_USER\\\"]\\n        email_receiver = \\\"alexcarpenter2000@gmail.com\\\"\\n        subject = \\\"Sales Interview Transcript\\\"\\n        body = f\\\"Interview Transcript:\\\\n\\\\n{transcript}\\\\n\\\\nGenerated Content:\\\\n\\\\n{article}\\\"\\n        password = st.secrets[\\\"EMAIL_PASSWORD\\\"]\\n\\n        try:\\n            msg = MIMEMultipart()\\n            msg['From'] = email_sender\\n            msg['To'] = email_receiver\\n            msg['Subject'] = subject\\n            msg.attach(MIMEText(body, 'plain'))\\n\\n            server = smtplib.SMTP('smtp.gmail.com', 587)\\n            server.starttls()\\n            server.login(email_sender, password)\\n            server.send_message(msg)\\n            server.quit()\\n\\n            st.success('Thank you so much for taking the time to have a conversation')\\n        except Exception as e:\\n            st.error(f\\\"An error occurred while sending the email: {e}\\\")\\n\\n        except Exception as e:\\n            st.error(f\\\"An error occurred: {str(e)}\\\")\\n            st.stop()\",\"replace\":\"    # Display assistant response in chat message container\\n    with st.chat_message(\\\"assistant\\\"):\\n        st.markdown(response_text)\"}]"}
