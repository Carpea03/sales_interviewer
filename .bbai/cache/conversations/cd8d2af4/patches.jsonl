{"timestamp":"2024-08-13T05:25:00.766Z","filePath":"main.py","patch":"[{\"search\":\"def send_email(transcript, story, recipient):\\n    try:\\n        yag = yagmail.SMTP(email_user, email_password)\\n        subject = \\\"Sales Interview Transcript\\\"\\n        content = f\\\"Interview Transcript:\\\\n\\\\n{transcript}\\\"\\n        yag.send(to=recipient, subject=subject, contents=content)\\n        return True\\n    except Exception as e:\\n        st.error(f\\\"An error occurred while sending the email: {str(e)}\\\")\\n        return False\",\"replace\":\"def send_email(transcript, story, recipient):\\n    sender = email_user\\n    password = email_password\\n    subject = \\\"Sales Interview Transcript\\\"\\n    content = f\\\"Interview Transcript:\\\\n\\\\n{transcript}\\\"\\n\\n    try:\\n        msg = MIMEMultipart()\\n        msg['From'] = sender\\n        msg['To'] = recipient\\n        msg['Subject'] = subject\\n        \\n        msg.attach(MIMEText(content, 'plain'))\\n        \\n        with smtplib.SMTP(email_server, email_port) as server:\\n            server.starttls()\\n            server.login(sender, password)\\n            server.send_message(msg)\\n        return True\\n    except Exception as e:\\n        st.error(f\\\"An error occurred while sending the email: {str(e)}\\\")\\n        return False\"},{\"search\":\"import smtplib\",\"replace\":\"import smtplib\"},{\"search\":\"assert isinstance(email_user, str), \\\"Email user must be a string\\\"\\n# Assertions for email_password, email_server, and email_port could be added here as needed\",\"replace\":\"assert isinstance(email_user, str), \\\"Email user must be a string\\\"\\nassert isinstance(email_password, str), \\\"Email password must be a string\\\"\\nassert isinstance(email_server, str), \\\"Email server must be a string\\\"\\nassert isinstance(email_port, int), \\\"Email port must be an integer\\\"\"}]"}
{"timestamp":"2024-08-13T05:26:58.332Z","filePath":"main.py","patch":"[{\"search\":\"import uuid\",\"replace\":\"import uuid\\nimport re\\n\\ndef strip_xml_tags(text):\\n    # Remove <response> and </response> tags\\n    text = re.sub(r'</?response>', '', text)\\n    # Remove <insights_summary> and </insights_summary> tags\\n    text = re.sub(r'</?insights_summary>', '', text)\\n    return text.strip()\"},{\"search\":\"    # Display assistant response in chat message container\\n    with st.chat_message(\\\"assistant\\\"):\\n        st.markdown(response_text)\",\"replace\":\"    # Strip XML tags from the response\\n    cleaned_response = strip_xml_tags(response_text)\\n\\n    # Display assistant response in chat message container\\n    with st.chat_message(\\\"assistant\\\"):\\n        st.markdown(cleaned_response)\\n\\n    # Update the conversation history with the cleaned response\\n    st.session_state.conversation_history[-1][\\\"content\\\"] = cleaned_response\"}]"}
